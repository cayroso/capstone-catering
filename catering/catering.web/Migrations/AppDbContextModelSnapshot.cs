// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using catering.web.Data;

namespace catering.web.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034");

            modelBuilder.Entity("catering.web.Data.BusinessInfo", b =>
                {
                    b.Property<string>("BusinessInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<string>("ContactNumber");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email");

                    b.Property<string>("Facebook");

                    b.Property<string>("History");

                    b.Property<string>("Location");

                    b.HasKey("BusinessInfoId");

                    b.ToTable("BusinessInfos");
                });

            modelBuilder.Entity("catering.web.Data.ItemPrice", b =>
                {
                    b.Property<string>("ItemPriceId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Chair");

                    b.Property<DateTime>("DateCreated");

                    b.Property<decimal>("FixedCost");

                    b.Property<decimal>("FixedLabor");

                    b.Property<decimal>("Flower");

                    b.Property<decimal>("Fork");

                    b.Property<decimal>("Glass");

                    b.Property<decimal>("Plate");

                    b.Property<decimal>("SoundSystem");

                    b.Property<decimal>("Spoon");

                    b.Property<decimal>("Table");

                    b.HasKey("ItemPriceId");

                    b.ToTable("ItemPrices");
                });

            modelBuilder.Entity("catering.web.Data.Package", b =>
                {
                    b.Property<string>("PackageId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("PackageId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("catering.web.Data.PackageImage", b =>
                {
                    b.Property<string>("PackageImageId");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.Property<string>("PackageId");

                    b.Property<double>("Price");

                    b.HasKey("PackageImageId");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageImages");
                });

            modelBuilder.Entity("catering.web.Data.PackageItem", b =>
                {
                    b.Property<string>("PackageItemId");

                    b.Property<string>("Category");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.Property<string>("PackageId");

                    b.Property<double>("Price");

                    b.Property<string>("Type");

                    b.HasKey("PackageItemId");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageItems");
                });

            modelBuilder.Entity("catering.web.Data.Reservation", b =>
                {
                    b.Property<string>("ReservationId");

                    b.Property<decimal>("AmountPaid");

                    b.Property<int>("ChairCount");

                    b.Property<decimal>("ChairPrice");

                    b.Property<DateTimeOffset>("DateEnd");

                    b.Property<DateTimeOffset>("DateStart");

                    b.Property<decimal>("FixedCost");

                    b.Property<decimal>("FixedLabor");

                    b.Property<decimal>("FlowerPrice");

                    b.Property<int>("ForkCount");

                    b.Property<decimal>("ForkPrice");

                    b.Property<int>("GlassCount");

                    b.Property<decimal>("GlassPrice");

                    b.Property<int>("GuestCount");

                    b.Property<bool>("HasFlowers");

                    b.Property<bool>("HasSoundSystem");

                    b.Property<string>("PackageId");

                    b.Property<int>("PlateCount");

                    b.Property<decimal>("PlatePrice");

                    b.Property<string>("ReferenceNumber");

                    b.Property<int>("ReservationStatus");

                    b.Property<decimal>("SoundSystemPrice");

                    b.Property<int>("SpoonCount");

                    b.Property<decimal>("SpoonPrice");

                    b.Property<int>("TableCount");

                    b.Property<decimal>("TablePrice");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.Property<string>("Venue");

                    b.HasKey("ReservationId");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("catering.web.Data.ReservationItem", b =>
                {
                    b.Property<string>("ReservationItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.Property<string>("ReservationId")
                        .IsRequired();

                    b.HasKey("ReservationItemId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationItem");
                });

            modelBuilder.Entity("catering.web.Data.ReservationNote", b =>
                {
                    b.Property<string>("ReservationNoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("ReservationId")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("ReservationNoteId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("UserId");

                    b.ToTable("ReservationNotes");
                });

            modelBuilder.Entity("catering.web.Data.Role", b =>
                {
                    b.Property<string>("RoleId");

                    b.Property<string>("Name");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("catering.web.Data.ShortMessage", b =>
                {
                    b.Property<string>("ShortMessageId");

                    b.Property<string>("Body");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateSent");

                    b.Property<string>("Receiver");

                    b.Property<string>("ReservationId")
                        .IsRequired();

                    b.Property<string>("Result");

                    b.Property<string>("Sender");

                    b.Property<int>("SentCount");

                    b.Property<string>("Subject");

                    b.HasKey("ShortMessageId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ShortMessage");
                });

            modelBuilder.Entity("catering.web.Data.User", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("Address");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("Mobile");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("catering.web.Data.UserRole", b =>
                {
                    b.Property<string>("UserRoleId");

                    b.Property<string>("RoleId");

                    b.Property<string>("UserId");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("catering.web.Data.PackageImage", b =>
                {
                    b.HasOne("catering.web.Data.Package", "Package")
                        .WithMany("Images")
                        .HasForeignKey("PackageId");
                });

            modelBuilder.Entity("catering.web.Data.PackageItem", b =>
                {
                    b.HasOne("catering.web.Data.Package", "Package")
                        .WithMany("Items")
                        .HasForeignKey("PackageId");
                });

            modelBuilder.Entity("catering.web.Data.Reservation", b =>
                {
                    b.HasOne("catering.web.Data.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId");

                    b.HasOne("catering.web.Data.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("catering.web.Data.ReservationItem", b =>
                {
                    b.HasOne("catering.web.Data.Reservation", "Reservation")
                        .WithMany("ReservationItems")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("catering.web.Data.ReservationNote", b =>
                {
                    b.HasOne("catering.web.Data.Reservation", "Reservation")
                        .WithMany("Notes")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("catering.web.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("catering.web.Data.ShortMessage", b =>
                {
                    b.HasOne("catering.web.Data.Reservation", "Reservation")
                        .WithMany("ShortMessages")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("catering.web.Data.UserRole", b =>
                {
                    b.HasOne("catering.web.Data.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("catering.web.Data.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
